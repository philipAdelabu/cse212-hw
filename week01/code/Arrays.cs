public static class Arrays
{
    /// <summary>
    /// This function will produce an array of size 'length' starting with 'number' followed by multiples of 'number'.  For 
    /// example, MultiplesOf(7, 5) will result in: {7, 14, 21, 28, 35}.  Assume that length is a positive
    /// integer greater than 0.
    /// </summary>
    /// <returns>array of doubles that are the multiples of the supplied number</returns>
    public static double[] MultiplesOf(double number, int length)
    {
        // TODO Problem 1 Start
        // Remember: Using comments in your program, write down your process for solving this problem
        // step by step before you write the code. The plan should be clear enough that it could
        // be implemented by another person.

        /* 
         i- To solve this, i will first assign the length of numbers to create which will determine
         the size of the fixed array.
         ii- I will create the fix array of double with the size deduced from the length given.
         iii- I will create a loop starting from index 0 up to the length but to equal to the length, this will determin the numbers of multiple numbers
         to generate. 
         iv- each element is generated by multiplying the number by the (index + 1) and store in the array at the right index position.
          
        
        */
        int size = length;
        double[] multiples = new double[size];
        for(int index = 0; index < length; index++){
            multiples[index] = number * (index + 1);
        }

        return multiples; // replace this return statement with your own
    }

    /// <summary>
    /// Rotate the 'data' to the right by the 'amount'.  For example, if the data is 
    /// List<int>{1, 2, 3, 4, 5, 6, 7, 8, 9} and an amount is 3 then the list after the function runs should be 
    /// List<int>{7, 8, 9, 1, 2, 3, 4, 5, 6}.  The value of amount will be in the range of 1 to data.Count, inclusive.
    ///
    /// Because a list is dynamic, this function will modify the existing data list rather than returning a new list.
    /// </summary>
    public static void RotateListRight(List<int> data, int amount)
    {
        // TODO Problem 2 Start
        // Remember: Using comments in your program, write down your process for solving this problem
        // step by step before you write the code. The plan should be clear enough that it could
        // be implemented by another person.

        /*
        To solve the problem, i will create a new list of integers and assigned to it 
        a range of of integer taken from the data list starting from the last element. To the get the index of the number on which to stop the range from a reverse order, 
        i will substract the amount of number to rotate from the length of the data list. 
        Then, I will add the remaining range of numbers to the first range.
         After that, I will clear the old list and assign to it the new list created.

        */

        List<int> newData = data.GetRange(data.Count - amount, amount); 
        newData.AddRange(data.GetRange(0, data.Count - amount));
        data.Clear();
        data.AddRange(newData);
        
    }
}
